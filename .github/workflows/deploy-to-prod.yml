name: Deploy to Prod with SSH Key

on:
  workflow_dispatch:
    inputs:
      confirmation:
        description: "Type 'yes' to confirm deployment to production"
        required: true
        default: "no"

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout prod branch using SSH
      - name: Checkout prod branch
        uses: actions/checkout@v3
        with:
          ssh-key: ${{ secrets.SSH_PRIVATE_KEY }}  # Use SSH key instead of HTTPS

      # Step 2: Set up SSH for Git
      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan github.com >> ~/.ssh/known_hosts

      # Step 3: Configure Git user
      - name: Configure Git User
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      # Step 4: Merge main into prod
      - name: Merge main into prod
        run: |
          git fetch origin main
          git checkout prod
          git merge origin/main --allow-unrelated-histories -m "Manual deployment from main to prod"

      # Step 5: Push changes to prod branch using SSH
      - name: Push changes
        run: |
          git push origin prod
          
     # Step 6: List All Databricks Repos (Diagnostic Step)
      - name: List All Databricks Repos
        env:
          DATABRICKS_HOST: "https://<your-databricks-instance>.azuredatabricks.net"  # Replace with your Databricks instance URL
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
        run: |
          echo "Listing all repos in Databricks to confirm path:"
          curl -X GET -H "Authorization: Bearer $DATABRICKS_TOKEN" "$DATABRICKS_HOST/api/2.0/repos" | jq '.repos[] | .path'

      # Step 7: Pull latest changes in Databricks
      - name: Pull latest changes in Databricks
        env:
          DATABRICKS_HOST: "https://<your-databricks-instance>.azuredatabricks.net"
          DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
        run: |
          REPO_PATH="/Workspace/Repos/monika_kumar5@outlook.com/prod_project"  # Confirm this matches exactly
          REPO_ID=$(curl -X GET -H "Authorization: Bearer $DATABRICKS_TOKEN" \
          "$DATABRICKS_HOST/api/2.0/repos" | jq -r --arg path "$REPO_PATH" '.repos[] | select(.path == $path) | .id')

          if [ -n "$REPO_ID" ]; then
            echo "Found repository with ID $REPO_ID. Pulling latest changes..."
            curl -X POST -H "Authorization: Bearer $DATABRICKS_TOKEN" \
            "$DATABRICKS_HOST/api/2.0/repos/$REPO_ID/update?branch=prod"
            echo "Successfully pulled latest changes in Databricks."
          else
            echo "Error: Repository not found in Databricks at the specified path."
            exit 1
          fi
